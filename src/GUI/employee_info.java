/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import CLS.*;
import net.proteanit.sql.DbUtils;

import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.*;
import java.sql.*;
import java.time.LocalDate;
import java.util.List;

/**
 *
 * @author hneen.
 */
public class employee_info extends javax.swing.JFrame {

    /**
     * Creates new form employee_info
     */
    public employee_info() {
        initComponents();
    }
    int id;
    employee e =new employee();
    Account c =new Account();
    public employee_info(int id) {
        initComponents();
        setDefault();

        this.id=id;

        e.openFile();
        e.addRecord();
        e.close();

        c.openFile();
        c.addRecord();
        c.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        delete = new javax.swing.JButton();
        Import_info = new javax.swing.JButton();
        Send_b = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        Find_b = new javax.swing.JButton();
        Find_TextField1 = new javax.swing.JTextField();
        Salary_TextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(239, 211, 191));

        jLabel1.setIcon(new javax.swing.ImageIcon("icons/img.png")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel2.setText("Employees Information");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        delete.setBackground(new java.awt.Color(166, 82, 43));
        delete.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        Import_info.setBackground(new java.awt.Color(166, 82, 43));
        Import_info.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        Import_info.setForeground(new java.awt.Color(255, 255, 255));
        Import_info.setText("Import info");
        Import_info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Import_infoActionPerformed(evt);
            }
        });

        Send_b.setBackground(new java.awt.Color(166, 82, 43));
        Send_b.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        Send_b.setForeground(new java.awt.Color(255, 255, 255));
        Send_b.setText("Send");
        Send_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Send_bActionPerformed(evt);
            }
        });

        Back.setBackground(new java.awt.Color(166, 82, 43));
        Back.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        Back.setForeground(new java.awt.Color(255, 255, 255));
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        Find_b.setBackground(new java.awt.Color(166, 82, 43));
        Find_b.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        Find_b.setForeground(new java.awt.Color(255, 255, 255));
        Find_b.setText("Find");
        Find_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Find_bActionPerformed(evt);
            }
        });

        Find_TextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Find_TextField1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setText("Set The Salary of seleced employee");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel4.setText("Find Employee by the first name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(820, 820, 820)
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Import_info, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(220, 220, 220)
                                        .addComponent(Send_b, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Salary_TextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Find_TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Find_b, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(91, 91, 91))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(113, 113, 113)
                                        .addComponent(jLabel4)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(Import_info, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Find_TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Find_b, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Salary_TextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Send_b, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {
        if (jTable1.getSelectedRow()>=0) {
            int getIdE = -1;
            int row = jTable1.getSelectedRow();
            getIdE = Integer.parseInt(jTable1.getModel().getValueAt(row, 0).toString());
            if (getIdE != -1) {
                deleteE(getIdE);
            }
        }else {
            JOptionPane.showMessageDialog(this, "Select Employee to delete!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Import_infoActionPerformed(java.awt.event.ActionEvent evt) {
        EmSer();
        setDefault();
    }

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
        manger d= new manger(id,"m");
        d.setTitle("Manager");
        d.setVisible(true);    }

    private void Send_bActionPerformed(java.awt.event.ActionEvent evt) {
        if (jTable1.getSelectedRow()>=0) {
            int getIdE = -1;
            int row = jTable1.getSelectedRow();
            getIdE = Integer.parseInt(jTable1.getModel().getValueAt(row, 0).toString());
            String salary=null;
            salary=Salary_TextField2.getText();
            if (!salary.equals("")){
                if (salary.matches("[0.0-9.0]+")) {
                    double salary1=Double.parseDouble(salary);
                    if (salary1<=10000 && salary1>0){
                        if (getIdE != -1) {
                            setSalary(getIdE, salary1);
                        }
                    }else {
                        JOptionPane.showMessageDialog(this, "Salary shouldn't be greater than 10K! or less than zero", "Error", JOptionPane.ERROR_MESSAGE);

                    }
                }else {
                    JOptionPane.showMessageDialog(this, "Enter number only!!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "Set a salary first!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else {
            JOptionPane.showMessageDialog(this, "Select Employee to delete!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Find_bActionPerformed(java.awt.event.ActionEvent evt) {
        String key="";
        key=Find_TextField1.getText();
//        key.trim();
        if (!key.equals("")){
            FindByName(key);
        }else {
            JOptionPane.showMessageDialog(this, "Set a Key first!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Find_TextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        setDefault();
    }
    void deleteE(int id){
        DB conn = new DB();
        Connection dbconn = conn.connectDB();
        PreparedStatement delete=null;
        try  {

            delete=dbconn.prepareStatement("DELETE FROM person WHERE (id = ?)");
            delete.setInt(1,id);
            int doDelete = delete.executeUpdate();
            if (doDelete==1){
                JOptionPane.showMessageDialog(this, "delete done!", "successful", JOptionPane.INFORMATION_MESSAGE);
                setDefault();
            }else {
                System.out.println("error");
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
                delete.close();
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
    void setDefault(){
        DB conn=new DB();
        Connection dbconn=conn.connectDB();
        PreparedStatement selectAll=null;
        ResultSet selectE=null;
        try {
            selectAll = dbconn.prepareStatement("SELECT * FROM employee");
            selectE= selectAll.executeQuery();
            jTable1.setModel(DbUtils.resultSetToTableModel(selectE));
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }
    void setSalary(int id ,double salary){
        DB conn = new DB();
        Connection dbconn = conn.connectDB();
        PreparedStatement update=null;
        try{
            LocalDate today =  LocalDate.now();             //Today
            LocalDate PayDate = today.plusDays(14);
            java.sql.Date d = java.sql.Date.valueOf( PayDate ) ;

            update=dbconn.prepareStatement("UPDATE employee SET salary =? ,payment_date=? WHERE (Employee_id =?)");
            update.setDouble(1,salary);
            update.setDate(2,d);
            update.setInt(3,id);
            int doUpdate = update.executeUpdate();
            if (doUpdate==1){
                JOptionPane.showMessageDialog(this, "Update done!", "successful", JOptionPane.INFORMATION_MESSAGE);
                setDefault();
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try{
                dbconn.close();
                update.close();
            }catch (SQLException e){
                e.printStackTrace();
            }
        }
    }
    void EmSer(){
        e.openToGet();
        List<employee> addE=e.readData();
        e.closeFile();

        c.openToGet();
        List<Account> addC=c.readData();
        c.closeFile();

        int last_id=0;
        int i=0;
        for (employee e : addE) {
            PreparedStatement id_p=null;
            ResultSet resultSet=null;
            PreparedStatement insert_id=null;
            PreparedStatement st=null;
            DB t=new DB();
            Connection dbconn=t.connectDB();
            try {
                id_p = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM person");
                resultSet = id_p.executeQuery();

                while (resultSet.next()) {
                    last_id = resultSet.getInt("id");
                }

                int s=last_id+1;
                insert_id=(PreparedStatement) dbconn.prepareStatement("insert into person(id) value (?)");
                insert_id.setInt(1,s);
                int res =insert_id.executeUpdate();
                if (res==1){
                    st = (PreparedStatement) dbconn.prepareStatement("insert into employee(Employee_id,Employee_name ,Employee_Phone ,supervise_id) values (?,?,?,4) ");
                    st.setInt(1, s);
                    st.setString(2, e.getName());
                    st.setString(3, e.getPhone());
                    int res2 = st.executeUpdate();
                    if (res2 == 1) {
                        PreparedStatement st1 = (PreparedStatement) dbconn.prepareStatement("insert into account(username ,password,person_id,rule) values (?,?,?,?)");
                        st1.setString(1, addC.get(i).getUsername());
                        st1.setString(2, addC.get(i).getPassword());
                        st1.setInt(3, s);
                        st1.setString(4, "e");
                        int res1 = st1.executeUpdate();
                        if (res1==1) {
                            i++;
//                      JOptionPane.showMessageDialog(this, "Employee Added", "done!", JOptionPane.INFORMATION_MESSAGE);
                        }              }
                }
            }  catch (SQLException ex) {
                ex.printStackTrace();
            }finally {
                try {
                    dbconn.close();
                    id_p.close();
                    insert_id.close();
                    resultSet.close();
                    st.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
    void FindByName(String key){
        DB conn = new DB();
        Connection dbconn = conn.connectDB();
        Statement find=null;
        ResultSet doFind=null;
        try{
            find=dbconn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            doFind = find.executeQuery("SELECT * FROM employee where Employee_name LIKE '%"+key+"%'");
            if (doFind.next()){
                jTable1.setModel(DbUtils.resultSetToTableModel(doFind));
            }else {
                JOptionPane.showMessageDialog(this, "not Find", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }catch (SQLException e){
            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
                doFind.close();
                find.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(employee_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(employee_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(employee_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(employee_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new employee_info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Back;
    private javax.swing.JTextField Find_TextField1;
    private javax.swing.JButton Find_b;
    private javax.swing.JButton Import_info;
    private javax.swing.JTextField Salary_TextField2;
    private javax.swing.JButton Send_b;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration                   
}
