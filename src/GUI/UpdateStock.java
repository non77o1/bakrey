/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import CLS.*;

/**
 *
 * @author hneen.
 */
public class UpdateStock extends javax.swing.JFrame {

    /**
     * Creates new form UpdateStock
     */
    String [] listStock;
    int id;
    String rule;
    public UpdateStock() {
        initComponents();
    }
    public UpdateStock(int id,String rule) {
        initComponents();
        this.id=id;
        this.rule=rule;
        int i=0;
        if (getAllItems()!=null){
            listStock =new String[50];
            for (Items b: getAllItems()){
                if (i!=50){
                    listStock[i]=b.toString();
                    i++;
                }
            }
            Item_jList1.setModel(new DefaultComboBoxModel<>(listStock));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Item_jList1 = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Name_jTextField = new javax.swing.JTextField();
        PricejTextField = new javax.swing.JTextField();
        Delete_Button = new javax.swing.JButton();
        Add_button = new javax.swing.JButton();
        Back_Button1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(239, 211, 191));

        jLabel1.setIcon(new javax.swing.ImageIcon("icons/roller.png")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel2.setText("Stock Update");

        Item_jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(Item_jList1);

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setText("Item Name:");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel4.setText("Item Price:");

        Delete_Button.setBackground(new java.awt.Color(166, 82, 43));
        Delete_Button.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        Delete_Button.setForeground(new java.awt.Color(255, 255, 255));
        Delete_Button.setText("Delete");
        Delete_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_ButtonActionPerformed(evt);
            }
        });

        Add_button.setBackground(new java.awt.Color(166, 82, 43));
        Add_button.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        Add_button.setForeground(new java.awt.Color(255, 255, 255));
        Add_button.setText("Add");
        Add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_buttonActionPerformed(evt);
            }
        });

        Back_Button1.setBackground(new java.awt.Color(166, 82, 43));
        Back_Button1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        Back_Button1.setForeground(new java.awt.Color(255, 255, 255));
        Back_Button1.setText("Back");
        Back_Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_Button1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(69, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PricejTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(Name_jTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Delete_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Back_Button1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Name_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(PricejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(Delete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Back_Button1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void Add_buttonActionPerformed(java.awt.event.ActionEvent evt) {
        String name = Name_jTextField.getText();
        String price = PricejTextField.getText();
        if (name.isEmpty() || price.isEmpty()) {
            JOptionPane.showMessageDialog(this, "should not be empty", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            name.trim();
            if (price.matches("[0.0-9.0]+")) {
                if (name.matches("[a-zA-Z_]+")) {
                    double price1 =Double.parseDouble(price);
                    if (price1 > 0) {
                        Add_Snack(name, price1);
                        int i=0;
                        if (getAllItems()!=null){
                            listStock =new String[50];
                            for (Items b: getAllItems()){
                                if (i!=50){
                                    listStock[i]=b.toString();
                                    i++;
                                }
                            }
                            Item_jList1.setModel(new DefaultComboBoxModel<>(listStock));
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Pleas Enter valid number at price filed", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Pleas Enter letters Only", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Pleas Enter valid number at price filed", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }    }

    private void Delete_ButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int select=-1;
        select=Item_jList1.getSelectedIndex();
        if (select!=-1){
            try {
                int index=-1;
                index=getAllItems().get(select).getItem_id();
                if (index!=-1){
                    delete_items(index);
                    index=-1;
                    int i=0;
                    if (getAllItems()!=null){
                        listStock =new String[50];
                        for (Items b: getAllItems()){
                            if (i!=50){
                                listStock[i]=b.toString();
                                i++;
                            }
                        }
                        Item_jList1.setModel(new DefaultComboBoxModel<>(listStock));
                    }
                }

            }catch (Exception e){
                JOptionPane.showMessageDialog(this, "reselect an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
//                e.printStackTrace();
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "select an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
        }    }

    private void Back_Button1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (rule=="e"){
            dispose();
            Employee d = new Employee(id, "e");
            d.setTitle("Employee");
            d.setVisible(true);
        }else if (rule=="m"){
            dispose();
            manger d= new manger(id,"m");
            d.setTitle("Manager");
            d.setVisible(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateStock().setVisible(true);
            }
        });
    }
    public List<Items> getAllItems(){
        List<Items> getingItems =null;
        ResultSet resultSet=null;
        DB n= new DB();
        Connection dbconn =n.connectDB();
        PreparedStatement getSnack =null;
        try {
            getSnack = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM stock");
            resultSet= getSnack.executeQuery();
            getingItems =new ArrayList<Items>();
            while (resultSet.next()){
                getingItems.add(new stock(resultSet.getInt("stock_id"),
                        resultSet.getString("stock_name"),
                        resultSet.getDouble("stock_price")));
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                resultSet.close();
                dbconn.close();
                getSnack.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return getingItems;
    }
    private void delete_items(int index){
        DB n= new DB();
        Connection dbconn =n.connectDB();
        PreparedStatement delete=null;
        try {
            delete =(PreparedStatement) dbconn.prepareStatement("DELETE FROM items WHERE (item_id = ?)");
            delete.setInt(1,index);
            int resultSet=delete.executeUpdate();
            getAllItems();
            if (resultSet!=0) {
                int i=0;
                if (getAllItems()!=null){

                    listStock =new String[50];
                    for (Items b: getAllItems()){
                        if (i<=50){
                            listStock[i]=b.toString();
                            i++;
                        }
                    }
                    Item_jList1.setModel(new DefaultComboBoxModel<>(listStock));
                    JOptionPane.showMessageDialog(this, "delete done!", "successful", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
                delete.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private void Add_Snack(String name, double price) {

        DB n= new DB();
        Connection dbconn =n.connectDB();
        int last_id=0;
        try {
            PreparedStatement id_p=(PreparedStatement) dbconn.prepareStatement("SELECT * FROM items");
            ResultSet resultSet=id_p.executeQuery();

            while (resultSet.next()){
                last_id = resultSet.getInt("item_id");
            }
            int s=last_id+1;
            PreparedStatement insert_id=(PreparedStatement) dbconn.prepareStatement("insert into items(item_id) value (?)");
            insert_id.setInt(1,s);
            int res =insert_id.executeUpdate();
            if (res==1){
                PreparedStatement st = (PreparedStatement) dbconn.prepareStatement("insert into stock(stock_id,stock_name,stock_price) values (?,?,?)  ");
                st.setInt(1, s);
                st.setString(2, name);
                st.setDouble(3,price);
                int res2 = st.executeUpdate();
                if (res2==1){
                    getAllItems();
                    JOptionPane.showMessageDialog(this, "Stock Added", "done!", JOptionPane.INFORMATION_MESSAGE);
                    st.close();
                }
            }
            id_p.close();
            resultSet.close();
            dbconn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Add_button;
    private javax.swing.JButton Back_Button1;
    private javax.swing.JButton Delete_Button;
    private javax.swing.JList<String> Item_jList1;
    private javax.swing.JTextField Name_jTextField;
    private javax.swing.JTextField PricejTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration                   
}
