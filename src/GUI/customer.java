/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import CLS.*;


import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author hneen.
 */
public class customer extends javax.swing.JFrame {

    /**
     * Creates new form customer
     */
    //to viwe data from the DB

    String [] listStock;
    int id;

    //for the item list  compenenit
    String [] listitem;
    //to view the items in the cart of the customer
    List<cartclass> cart1;
    int id_order=0;
    //    int id_customer=0;
    int id_payment = 0;
    int num_items=0;
    double totalPrice_=0;

    int id_customer;
    stock Stock;
    public customer() {
        initComponents();
    }
    public customer(int idCustomer) {
        initComponents();
        buttonGroup1.add(card_Radio);
        buttonGroup1.add(cash_Radio);
        Holder_jTextField.setVisible(false);
        CardNum_jTextField.setVisible(false);
        CVV_jTextField.setVisible(false);
        jLabel9.setVisible(false);
        jLabel8.setVisible(false);
        jLabel7.setVisible(false);
        this.id_customer=idCustomer;
        showCustomer_info(id_customer);
        showCart();
        int i=0;
        if (getAllItems()!=null){
            listStock =new String[50];
            for (Items b: getAllItems()){
                if (i!=50){
                    listStock[i]=b.toString();
                    i++;
                }
            }
            Item_List1.setModel(new DefaultComboBoxModel<>(listStock));
            cart_jList.setModel(new DefaultComboBoxModel<>());
        }
        try {
            DB n = new DB();
            Connection dbconn = n.connectDB();
            PreparedStatement id_p = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM Bakery.order");
            ResultSet resultSet = id_p.executeQuery();
            while (resultSet.next()) {
                id_order = resultSet.getInt("order_id");
            }
            id_order++;
            PreparedStatement insert_id = (PreparedStatement) dbconn.prepareStatement("INSERT INTO Bakery.order (order_id) VALUES (?)");
            insert_id.setInt(1,id_order );
            int res =insert_id.executeUpdate();
            if (res==1){

            }
            dbconn.close();
            id_p.close();
            resultSet.close();
            insert_id.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try { DB n = new DB();
            Connection dbconn = n.connectDB();
            PreparedStatement id_pay = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM Bakery.payment_methods");
            ResultSet resultSet = id_pay.executeQuery();
            while (resultSet.next()) {
                id_payment = resultSet.getInt("Payment_id");
            }
            id_payment++;
            PreparedStatement insert_id = (PreparedStatement) dbconn.prepareStatement("INSERT INTO Bakery.payment_methods (Payment_id,Order_id) VALUES (?,?)");
            insert_id.setInt(1, id_payment);
            insert_id.setInt(2, id_order);
            int res = insert_id.executeUpdate();
            if (res == 1) {

            }
            dbconn.close();
            id_pay.close();
            resultSet.close();
            insert_id.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTextField3 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Item_List1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        cart_jList = new javax.swing.JList<>();
        Add_jButton = new javax.swing.JButton();
        Delet_jButton = new javax.swing.JButton();
        cash_Radio = new javax.swing.JRadioButton();
        card_Radio = new javax.swing.JRadioButton();
        Done_Button = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        CardNum_jTextField = new javax.swing.JTextField();
        CVV_jTextField = new javax.swing.JTextField();
        Holder_jTextField = new javax.swing.JTextField();
        CustName = new javax.swing.JLabel();

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(166, 82, 43));
        jLabel2.setText("Sign Up");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(166, 82, 43));
        jLabel5.setText("Full Name:");

        jTextField3.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(239, 211, 191));

        jLabel1.setIcon(new javax.swing.ImageIcon("/Users/hneen./IdeaProjects/caffe/icons/bakery-shop.png")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(166, 82, 43));
        jLabel3.setText("Customer");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(166, 82, 43));
        jLabel4.setText("Cart:");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(166, 82, 43));
        jLabel6.setText("Shope Items:");

        Item_List1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(Item_List1);

        cart_jList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(cart_jList);

        Add_jButton.setText("Add");
        Add_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_jButtonActionPerformed(evt);
            }
        });

        Delet_jButton.setText("Delete");
        Delet_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delet_jButtonActionPerformed(evt);
            }
        });

        cash_Radio.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        cash_Radio.setText("Cash");
        cash_Radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_RadioActionPerformed(evt);
            }
        });

        card_Radio.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        card_Radio.setText("Card");
        card_Radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card_RadioActionPerformed(evt);
            }
        });

        Done_Button.setBackground(new java.awt.Color(166, 82, 43));
        Done_Button.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        Done_Button.setForeground(new java.awt.Color(255, 255, 255));
        Done_Button.setText("Done!");
        Done_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Done_ButtonActionPerformed(evt);
            }
        });

        ExitButton.setBackground(new java.awt.Color(166, 82, 43));
        ExitButton.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(255, 255, 255));
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(166, 82, 43));
        jLabel7.setText("Card holder:");

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(166, 82, 43));
        jLabel8.setText("Card Number:");

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(166, 82, 43));
        jLabel9.setText("CVV:");

        CustName.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        CustName.setText("Hi coust");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 303, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(112, 112, 112))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(Delet_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(278, 278, 278))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(CVV_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Holder_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CardNum_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cash_Radio, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(card_Radio)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(Add_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Done_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ExitButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CustName, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)))
                .addGap(179, 179, 179))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(41, 41, 41)
                        .addComponent(CustName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(Add_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(Delet_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cash_Radio)
                                    .addComponent(card_Radio))
                                .addGap(65, 65, 65))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Done_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Holder_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CardNum_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CVV_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>                        

    private void Done_ButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if(cart1!=null) {

            if (card_Radio.isSelected() || cash_Radio.isSelected()){
                card card = null;
                cash cash=null;
                if (card_Radio.isSelected()) {
                    setTotalPrice_();
                    int ID_pay = id_payment;
                    String holder = Holder_jTextField.getText();
                    String card_num = CardNum_jTextField.getText();
                    String CVV = CVV_jTextField.getText();
                    if (holder.isEmpty() || card_num.isEmpty() || CVV.isEmpty() || totalPrice_ == 0) {
                        JOptionPane.showMessageDialog(this, "should not be empty", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        if (card_num.length()==16){
                            if (CVV.length()==3) {
                                if (card_num.matches("[0-9]+") && CVV.matches("[0-9]+")) {
                                    if (holder.matches("[a-zA-Z_]+")) {
                                        card = new card(ID_pay, totalPrice_, holder, card_num, CVV);
                                        sendPaynemt(card, num_items);
                                        long millis = System.currentTimeMillis();
                                        if (sendOrderRecord(id_order, id_customer, id_payment, new java.sql.Date(millis),Stock)) {
                                            if (card != null) {
                                                dispose();
                                                bill d = new bill(id_customer, num_items, card,id_order);
                                                d.setTitle("dashbord");
                                                d.setVisible(true);
                                            }
                                        }


                                    } else {
                                        JOptionPane.showMessageDialog(this, "Pleas Enter letters Only at holder name and type", "Error", JOptionPane.ERROR_MESSAGE);
                                    }
                                }else {
                                    JOptionPane.showMessageDialog(this, "Pleas Enter number at card number and CVV", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            }else {
                                JOptionPane.showMessageDialog(this, "Pleas Enter 3 number at CVV filed", "Error", JOptionPane.ERROR_MESSAGE);
                            }

                        }else {
                            JOptionPane.showMessageDialog(this, "Pleas Enter 16 number at card number filed", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }else if (cash_Radio.isSelected()) {
                    setTotalPrice_();
                    String CURRENCY = "SAR";
                    cash = new cash(id_payment, totalPrice_, CURRENCY);
                    sendPaynemt(cash, num_items);
                    long millis=System.currentTimeMillis();
                    if (sendOrderRecord(id_order,id_customer,id_payment,new java.sql.Date(millis),Stock)){
                        if (cash!=null){
                            dispose();
                            bill d = new bill(id_customer, num_items, cash,id_order);
                            d.setTitle("dashbord");
                            d.setVisible(true);
                        }
                    }
                }
            }else {
                JOptionPane.showMessageDialog(this, "select the payment way first", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }else {
            JOptionPane.showMessageDialog(this, "Add to cart first", "Error", JOptionPane.ERROR_MESSAGE);
        }    }

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
        loging d= new loging();
        d.setTitle("dashbord");
        d.setVisible(true);
    }

    private void Add_jButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int select=-1;
        select=Item_List1.getSelectedIndex();
        if (select!=-1){
            try {
                int index=-1;
                index=getAllItems().get(select).getItem_id();
                if (index!=-1 && id_order!=-1){
                    addToCArat(select,index,id_order);
                }

            }catch (Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "reselect an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
//                e.printStackTrace();
            }


        }
        else {
            JOptionPane.showMessageDialog(this, "select an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
        }     }

    private void Delet_jButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int select=-1;
        select=cart_jList.getSelectedIndex();
        if (select!=-1){
            try {
                deleteItem(select);
            }catch (Exception e){
                JOptionPane.showMessageDialog(this, "reselect an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }


        }
        else {
            JOptionPane.showMessageDialog(this, "select an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
        }    }

    private void cash_RadioActionPerformed(java.awt.event.ActionEvent evt) {
        showCArdfield(evt);
    }

    private void card_RadioActionPerformed(java.awt.event.ActionEvent evt) {
        showCArdfield(evt);
    }

    /**
     */
    void showCustomer_info(int id_customer){
        DB conn=new DB();
        Connection dbconn=conn.connectDB();
        PreparedStatement st1=null;
        ResultSet cos_ifo =null;
        try {
            st1 = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM customer where coustomer_id = ? ");
            st1.setInt(1,id_customer);
            cos_ifo =st1.executeQuery();
            if (cos_ifo.next()){
                CustName.setText("Hi "+ cos_ifo.getString("coustomer_name"));
                System.out.println("enterd to change name");
            }

        } catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
                st1.close();
                cos_ifo.close();
            }catch (Exception e){
                e.printStackTrace();
            }
        }

    }

    void showCart(){
        int i=0;
        listitem=new String[50];
        if (cart1!=null){
            for (cartclass s : cart1){
                if (i!=50){
                    listitem[i]= s.toString();
                    i++;
                }
            }
            cart_jList.setModel(new DefaultComboBoxModel<>(listitem));
        }
    }
    void showCArdfield(java.awt.event.ActionEvent evt){
        if (evt.getSource().equals(card_Radio)){
            Holder_jTextField.setVisible(true);
            CardNum_jTextField.setVisible(true);
            CVV_jTextField.setVisible(true);
            jLabel9.setVisible(true);
            jLabel8.setVisible(true);
            jLabel7.setVisible(true);
        }


        if (evt.getSource().equals(cash_Radio)){
            Holder_jTextField.setVisible(false);
            CardNum_jTextField.setVisible(false);
            CVV_jTextField.setVisible(false);
            jLabel9.setVisible(false);
            jLabel8.setVisible(false);
            jLabel7.setVisible(false);
        }

    }

    void deleteItem(int select)  {
        DB n= new DB();
        Connection dbconn =n.connectDB();
        try {
            if (cart1.get(select).getNumItem()>1) {

                try {
                    PreparedStatement exit = (PreparedStatement) dbconn.prepareStatement("select * from cart where order_id=? and item_id=?");
                    exit.setInt(1, id_order);
                    exit.setInt(2, cart1.get(select).getItem_id());
                    ResultSet  res = exit.executeQuery();
                    if (res.next()) {
                        int numOfItem = res.getInt("num_item") - 1;
                        double priceOfitem =cart1.get(select).getItems().getItem_prise()* numOfItem;
                        PreparedStatement update = (PreparedStatement) dbconn.prepareStatement("update cart set num_item =? , price =? where order_id=? and item_id=?");
                        update.setInt(1, numOfItem);
                        update.setDouble(2, priceOfitem);
                        update.setInt(3, id_order);
                        update.setInt(4, cart1.get(select).getItem_id());
                        int update9 = update.executeUpdate();
                        if (update9 == 1) {
                            getAllCart();
                            showCart();
                        }

                        JOptionPane.showMessageDialog(this, "one item delete from cart!", "done!", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }

                } catch(SQLException e){
                    e.printStackTrace();
                }
            }
            if (cart1.get(select).getNumItem()==1){
                PreparedStatement delete = (PreparedStatement) dbconn.prepareStatement("DELETE FROM cart WHERE (order_id=? and item_id = ?)");
                delete.setInt(1, cart1.get(select).getOrder_id());
                delete.setInt(2, cart1.get(select).getItem_id());
                int reslt=delete.executeUpdate();
                if (reslt==1){
                    getAllCart();
                    showCart();
                    JOptionPane.showMessageDialog(this, "item delete from cart!", "done!", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
            }catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public List<Items> getAllItems(){
        List<Items> getingItems =null;
        ResultSet resultSet=null;
        DB n= new DB();
        Connection dbconn =n.connectDB();
        PreparedStatement getSnack =null;
        try {
            getSnack = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM stock");
            resultSet= getSnack.executeQuery();
            getingItems =new ArrayList<Items>();
            while (resultSet.next()){
                getingItems.add(new stock(resultSet.getInt("stock_id"),
                        resultSet.getString("stock_name"),
                        resultSet.getDouble("stock_price")));
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                resultSet.close();
                dbconn.close();
                getSnack.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return getingItems;
    }

    void addToCArat(int select ,int id_item,int id) {

        DB n= new DB();
        Connection dbconn =n.connectDB();

        try {
            PreparedStatement exit = (PreparedStatement) dbconn.prepareStatement("select * from cart where order_id=? and item_id=?");
            exit.setInt(1, id);
            exit.setInt(2, id_item);
            ResultSet res = exit.executeQuery();
            if (res.next()){
                int numOfItem=res.getInt("num_item")+1;
                double priceOfitem =getAllItems().get(select).getItem_prise()* numOfItem;
                PreparedStatement update = (PreparedStatement) dbconn.prepareStatement("update cart set num_item =? , price =? where order_id=? and item_id=?");
                update.setInt(1,numOfItem);
                update.setDouble(2,priceOfitem);
                update.setInt(3, id);
                update.setInt(4, id_item);
                int update9 = update.executeUpdate();
                if (update9==1){
                    getAllCart();
                    showCart();
                    JOptionPane.showMessageDialog(this, "item stat up date to cart!", "done!", JOptionPane.INFORMATION_MESSAGE);
                }
                return;
            }

            if (res.next()==false){
                PreparedStatement  st = (PreparedStatement) dbconn.prepareStatement("insert into cart(order_id,item_id ,num_item,price) values (?,?,?,?)  ");
                st.setInt(1, id);
                st.setInt(2, id_item);
                st.setInt(3, 1);
                st.setDouble(4, getAllItems().get(select).getItem_prise());
                int res2 = st.executeUpdate();
                if (res2 == 1) {
                    getAllCart();
                    showCart();
                    JOptionPane.showMessageDialog(this, "item Added to cart!", "done!", JOptionPane.INFORMATION_MESSAGE);
                }
            }


        }catch (SQLException e) {

            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
            }catch (SQLException e) {

                e.printStackTrace();
            }

        }


    }

    public List<cartclass> getAllCart(){
//        List<Integer> items_id=null;
        List<Items> getingItems =null;
        ResultSet resultSet=null;
        PreparedStatement getItems=null;
        PreparedStatement getSnack=null;
        DB n= new DB();
        Connection dbconn =n.connectDB();
        try {
            getItems = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM cart WHERE order_id=?");
            getItems.setInt(1,id_order);
            resultSet=getItems.executeQuery();
            cart1=new ArrayList<cartclass>();
            while (resultSet.next()){
                cart1.add(new cartclass(resultSet.getInt("order_id"),resultSet.getInt("item_id"),resultSet.getInt("num_item"),resultSet.getDouble("price")));
            }
            for (cartclass c:cart1){
                getSnack = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM stock where stock_id=?");
                getSnack.setInt(1,c.getItem_id());
                resultSet = getSnack.executeQuery();
                while (resultSet.next()) {
                    c.setItems(new stock(resultSet.getInt("stock_id"),
                            resultSet.getString("stock_name"),
                            resultSet.getDouble("stock_price")));
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                resultSet.close();
//                getSnack.close();
                getItems.close();
                dbconn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
//        return getingItems;
        return cart1;
    }

    void setTotalPrice_(){
        DB n= new DB();
        Connection dbconn =n.connectDB();
        try  {

            PreparedStatement totalPrice= (PreparedStatement) dbconn.prepareStatement("SELECT sum(price) , sum(num_item) from cart  where order_id=?");
            totalPrice.setInt(1, id_order);
            ResultSet res_price = totalPrice.executeQuery();
            if (res_price.next()) {
                num_items = res_price.getInt("sum(num_item)");
                this.totalPrice_ += res_price.getDouble("sum(price)");
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
    }

    void sendPaynemt(Payment obj,int num_items){
        DB n= new DB();
        Connection dbconn =n.connectDB();

        try {
            if (obj instanceof card) {
                PreparedStatement card=dbconn.prepareStatement("insert into card(holder_name,ccv,card_number,Payment_id,Order_Total_price,num_items) values (?,?,?,?,?,?)");
                card.setString(1,((card) obj).getOwner_name());
                card.setString(2,((card) obj).getCCV());
                card.setString(3,((card) obj).getCard_num());
                card.setInt(4,obj.getPay_id());
                card.setDouble(5,obj.getTotal_price());
                card.setInt(6,num_items);
                int Reslt=card.executeUpdate();
                if (Reslt==1){
                    card.close();
                }
            }

            if (obj instanceof cash) {
                PreparedStatement cash=dbconn.prepareStatement("insert into cash(Payment_id,Order_Total_price,currency,num_items) values (?,?,?,?)");
                cash.setInt(1,obj.getPay_id());
                cash.setDouble(2,obj.getTotal_price());
                cash.setString(3,((cash) obj).getCurrency());
                cash.setInt(4,num_items);
                int reslt=cash.executeUpdate();
                if(reslt==1){
                    cash.close();
                }
            }
        }catch (SQLException e){
            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
            }catch (SQLException e){
                e.printStackTrace();
            }
        }
    }
    boolean sendOrderRecord(int id_order ,int custemer_id,int id_payment,java.sql.Date order_date,stock Stock){
        DB n= new DB();
        Connection dbconn =n.connectDB();
        PreparedStatement inserToOrderRecord=null;
        try {
            inserToOrderRecord=dbconn.prepareStatement("insert into order_record(order_id,custemer_id,pay_id,order_date) values (?,?,?,?)");
            inserToOrderRecord.setInt(1,id_order);
            inserToOrderRecord.setInt(2,custemer_id);
            inserToOrderRecord.setInt(3,id_payment);
            inserToOrderRecord.setDate(4,order_date);
            int inser=inserToOrderRecord.executeUpdate();
            if (inser==1){
                return true;
            }

        }catch (SQLException e){
            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
                inserToOrderRecord.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return false;
    }


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new customer().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify                     
    private javax.swing.JButton Add_jButton;
    private javax.swing.JTextField CVV_jTextField;
    private javax.swing.JTextField CardNum_jTextField;
    private javax.swing.JLabel CustName;
    private javax.swing.JButton Delet_jButton;
    private javax.swing.JButton Done_Button;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField Holder_jTextField;
    private javax.swing.JList<String> Item_List1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton card_Radio;
    private javax.swing.JList<String> cart_jList;
    private javax.swing.JRadioButton cash_Radio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration                   
}
